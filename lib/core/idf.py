from logging import Logger
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


from scipy.stats import linregress

from lib.const import *
from lib.core.utils import Utils


class IDF:
    """
    Classe pour l'analyse des courbes IDF (Intensit√©-Dur√©e-Fr√©quence) des pr√©cipitations.
    
    Cette classe permet de :
    - Charger des donn√©es de pr√©cipitations maximales annuelles
    - Calculer les param√®tres de la distribution de Gumbel
    - Estimer les lames pr√©cipit√©es et intensit√©s pour diff√©rentes p√©riodes de retour
    - Calculer les param√®tres de Montana pour la mod√©lisation IDF
    
    Attributes:
        data_path (str): Chemin vers le fichier de donn√©es
        return_periods (np.ndarray): P√©riodes de retour √† analyser (en ann√©es)
        logger (Logger, optional): Logger pour les messages informatifs
        df (pd.DataFrame): Donn√©es charg√©es depuis le fichier
        columns (pd.Index): Colonnes des dur√©es (en heures)
        summary (pd.DataFrame): Statistiques descriptives et param√®tres de Gumbel
        rain_estimator (pd.DataFrame): Lames pr√©cipit√©es estim√©es
        intensity_estimator (pd.DataFrame): Intensit√©s pluviom√©triques estim√©es
        montana_params (pd.DataFrame): Param√®tres a et b de Montana
        montana_estimator (pd.DataFrame): Intensit√©s estim√©es par Montana
    """
    
    def __init__(self, data_path: str, return_periods: np.ndarray, logger: Logger = None):
        """
        Initialise une instance IDF et ex√©cute toute la cha√Æne de traitement.
        
        Args:
            data_path (str): Chemin vers le fichier Excel ou CSV contenant les donn√©es
            return_periods (np.ndarray): P√©riodes de retour √† analyser (ex: [2, 5, 10, 25, 50, 100])
            logger (Logger, optional): Logger pour tracer les op√©rations. Defaults to None.
            
        Raises:
            Exception: Si le fichier n'est pas support√© ou mal format√©
        """
        # Initialisation des attributs principaux
        self.data_path = data_path
        self.return_periods = return_periods
        self.logger = logger
        
        # Initialisation des attributs de donn√©es
        self.dfs = {}  # Dictionnaire pour stocker les DataFrames par station
        self.columns = None
        self.stations = None
        self.df = None
        
        # Chargement et validation des donn√©es
        self._load_dataframe()
          
        # Calcul des statistiques et param√®tres de Gumbel
        self.summary = None
        # self._summary()
        
        # Estimation des lames pr√©cipit√©es
        self.rain_estimator = None
        # self._rain_estimator()
        
        # Calcul des intensit√©s pluviom√©triques
        self.intensity_estimator = None
        # self._intensity_estimator()
    
        # Calcul des param√®tres de Montana
        self.montana_params = None
        # self._montana_parameters()
        
        # Estimation finale avec la formule de Montana
        self.montana_estimator = None
        # self._montana_estimation()
        
        # Le message de succ√®s sera affich√© seulement apr√®s l'analyse compl√®te
    
    def _load_dataframe(self):
        """
        Charge et valide les donn√©es de pr√©cipitations depuis un fichier Excel ou CSV.
        
        Le fichier doit contenir :
        - Une colonne 'Year' avec les ann√©es
        - Des colonnes num√©riques repr√©sentant les dur√©es en heures (1, 2, 3, 6, 12, 24, etc.)
        - Les valeurs de pr√©cipitations maximales annuelles pour chaque dur√©e
        
        Raises:
            Exception: Si le type de fichier n'est pas support√©
            Exception: Si la colonne 'Year' est manquante
            Exception: Si les colonnes de dur√©e ne sont pas des entiers positifs
        """
        try :
            
            df_final = Utils.transform_to_hourly_excel(input_file_path=self.data_path)
            
            if df_final is None or df_final.empty:
                raise Exception("Le DataFrame est vide ou mal format√©.")
            
            self.stations = df_final.columns.tolist()[1:]  # Exclut la colonne 'Year'

            self.dfs = Utils.calculate_annual_max_rainfall(df_hourly=df_final, windows=[1, 2, 3, 6, 12, 24])
            
            # Premi√®re station pour initialiser les attributs
            first_station = next(iter(self.dfs))
            self.columns = self.dfs[first_station].columns[1:]
            
        except Exception as e:
            error_msg = f"Erreur lors du chargement des donn√©es: {str(e)}"
            if self.logger:
                self.logger.error(error_msg)
            raise Exception(error_msg)
        
        if self.logger:
            stations_str = ", ".join(self.stations[:3])  # Affiche les 3 premi√®res stations
            more_stations = f" et {len(self.stations)-3} autres" if len(self.stations) > 3 else ""
            self.logger.info(f"‚úÖ Fichier trait√© : {len(self.dfs)} stations ({stations_str}{more_stations}), {len(self.columns)} dur√©es disponibles")

    def do_analysis(self, station: str):
        """
        Ex√©cute l'analyse IDF compl√®te.
        
        Cette m√©thode est appel√©e apr√®s l'initialisation pour lancer le processus d'analyse.
        Elle appelle les m√©thodes internes pour calculer les statistiques, estimer les lames,
        intensit√©s et param√®tres de Montana.
        """
        if self.logger:
            self.logger.info(f"üöÄ D√©but de l'analyse IDF pour la station: {station}")
        
        # V√©rification de la validit√© de la station
        if station not in self.dfs:
            raise ValueError(f"La station '{station}' n'existe pas dans les donn√©es.")
        
        # S√©lection des donn√©es pour la station
        self.df = self.dfs[station]
        self.columns = self.df.columns[1:]
            
        # Calcul des statistiques descriptives et param√®tres de Gumbel
        self._summary()
        
        # Estimation des lames pr√©cipit√©es
        self._rain_estimator()
        
        # Calcul des intensit√©s pluviom√©triques
        self._intensity_estimator()
        
        # Calcul des param√®tres de Montana
        self._montana_parameters()
        
        # Estimation finale avec la formule de Montana
        self._montana_estimation()
        
        if self.logger:
            self.logger.info(f"‚úÖ Analyse IDF termin√©e avec succ√®s pour la station '{station}'")
    
    def _summary(self):
        """
        Calcule les statistiques descriptives et les param√®tres de la distribution de Gumbel.
        
        Pour chaque dur√©e de pr√©cipitation, cette m√©thode calcule :
        - La moyenne des pr√©cipitations maximales annuelles
        - La variance des pr√©cipitations maximales annuelles  
        - Les param√®tres mu et beta de la distribution de Gumbel
        
        La distribution de Gumbel est utilis√©e pour mod√©liser les valeurs extr√™mes de pr√©cipitations.
        Les param√®tres sont calcul√©s par la m√©thode des moments :
        - beta = sqrt(6 * variance) / œÄ
        - mu = moyenne - beta * constante_euler_mascheroni
        
        Results:
            self.summary (pd.DataFrame): DataFrame contenant les colonnes Mean, Variance, mu, beta
        """
        if self.logger:
            self.logger.info("üìä Calcul des statistiques et param√®tres de Gumbel")
        
        # S√©lection des colonnes num√©riques (dur√©es) en excluant 'Year'
        numeric_columns = self.df.columns[1:]

        # Calcul des statistiques de base pour chaque dur√©e
        mean_values = self.df[numeric_columns].mean()
        variance_values = self.df[numeric_columns].var()
        
        def gumbel_parameters(mean, variance):
            """
            Calcule les param√®tres de la distribution de Gumbel par la m√©thode des moments.
            
            Args:
                mean (float): Moyenne de l'√©chantillon
                variance (float): Variance de l'√©chantillon
                
            Returns:
                tuple: (mu, beta) param√®tres de position et d'√©chelle de Gumbel
            """
            # Param√®tre d'√©chelle (beta)
            beta = np.sqrt(6 * variance) / np.pi
            # Param√®tre de position (mu) 
            mu = mean - beta * EULER_MASCHERONI
            return mu, beta

        # Calcul des param√®tres de Gumbel pour chaque dur√©e
        gumbel_params = {
            col: gumbel_parameters(mean_values[col], variance_values[col]) 
            for col in numeric_columns
        }

        # Cr√©ation du DataFrame des param√®tres de Gumbel
        gumbel_params_df = pd.DataFrame(gumbel_params, index=['mu', 'beta']).T

        # Assemblage du DataFrame de synth√®se avec toutes les statistiques
        summary_df = pd.DataFrame({
            'Mean': mean_values,
            'Variance': variance_values
        })
        
        # Concat√©nation des statistiques de base avec les param√®tres de Gumbel
        self.summary = pd.concat([summary_df, gumbel_params_df], axis=1)
        
    
    def _rain_estimator(self):
        """
        Estime les lames pr√©cipit√©es pour chaque dur√©e et p√©riode de retour en utilisant la distribution de Gumbel.
        
        Cette m√©thode applique la formule de quantiles de Gumbel :
        X_T = mu + beta * Y_T
        
        O√π :
        - X_T : lame pr√©cipit√©e pour la p√©riode de retour T
        - mu, beta : param√®tres de Gumbel calcul√©s pr√©c√©demment
        - Y_T : variable r√©duite de Gumbel = -ln(-ln(F))
        - F : probabilit√© de non-d√©passement = 1 - 1/T
        
        Results:
            self.rain_estimator (pd.DataFrame): Lames pr√©cipit√©es estim√©es
                                               Index: dur√©es, Colonnes: p√©riodes de retour
        """
        if self.logger:
            self.logger.info("ÔøΩ Estimation des lames pr√©cipit√©es")
        
        # Calcul de la probabilit√© de non-d√©passement F = 1 - 1/T
        # o√π T est la p√©riode de retour
        F = 1 - 1 / self.return_periods

        # Calcul de la variable r√©duite de Gumbel Y = -ln(-ln(F))
        gumbel_reduce_var = Utils.gumbel_var(F)

        # Estimation des lames pr√©cipit√©es pour chaque dur√©e
        estimated_rain = {}

        for column in self.columns:
            # R√©cup√©ration des param√®tres de Gumbel pour cette dur√©e
            mu = self.summary.loc[column, 'mu']
            beta = self.summary.loc[column, 'beta']
            
            # Application de la formule de quantile de Gumbel : X = mu + beta * Y
            estimated_rain[column] = mu + beta * gumbel_reduce_var

        # Cr√©ation du DataFrame avec les dur√©es en index et les p√©riodes de retour en colonnes
        self.rain_estimator = pd.DataFrame(estimated_rain, index=self.return_periods).T

    def _intensity_estimator(self):
        """
        Calcule les intensit√©s pluviom√©triques √† partir des lames pr√©cipit√©es estim√©es.
        
        L'intensit√© pluviom√©trique (mm/h) est obtenue en divisant la lame pr√©cipit√©e (mm)
        par la dur√©e de l'√©pisode pluvieux (h) :
        
        Intensit√© = Lame pr√©cipit√©e / Dur√©e
        
        Cette transformation est essentielle pour √©tablir les courbes IDF qui lient
        l'intensit√©, la dur√©e et la fr√©quence des pr√©cipitations.
        
        Results:
            self.intensity_estimator (pd.DataFrame): Intensit√©s pluviom√©triques (mm/h)
                                                    Index: dur√©es, Colonnes: p√©riodes de retour
        """
        if self.logger:
            self.logger.info("‚ö° Calcul des intensit√©s pluviom√©triques")
        
        # Calcul des intensit√©s pour chaque dur√©e
        estimated_intensity_rain = {}

        for column in self.columns:
            # Conversion de la dur√©e en entier pour le calcul
            duration_hours = int(column)
            
            # Calcul de l'intensit√© : lame pr√©cipit√©e / dur√©e
            # self.rain_estimator.loc[column] contient les lames pour toutes les p√©riodes de retour
            estimated_intensity_rain[column] = self.rain_estimator.loc[column] / duration_hours
            
        # Cr√©ation du DataFrame des intensit√©s avec la m√™me structure que rain_estimator
        self.intensity_estimator = pd.DataFrame(estimated_intensity_rain, index=self.return_periods).T

    def _montana_parameters(self):
        """
        Calcule les param√®tres de Montana (a et b) pour chaque p√©riode de retour.
        
        La formule de Montana √©tablit une relation puissance entre l'intensit√© pluviom√©trique
        et la dur√©e de l'√©pisode :
        
        I = b * t^(-a)
        
        O√π :
        - I : intensit√© pluviom√©trique (mm/h)
        - t : dur√©e (h)  
        - a : coefficient d'abattement (sans dimension)
        - b : intensit√© √† 1 heure (mm/h)
        
        Les param√®tres sont obtenus par r√©gression lin√©aire en √©chelle log-log :
        ln(I) = ln(b) - a * ln(t)
        
        Results:
            self.montana_params (pd.DataFrame): Param√®tres a et b pour chaque p√©riode de retour
                                              Index: p√©riodes de retour, Colonnes: ['a', 'b']
        """
        if self.logger:
            self.logger.info("üîß Calcul des param√®tres de Montana")
        
        # Transformation logarithmique des dur√©es
        log_hours = np.log(self.columns.astype(float))
        
        # Transformation logarithmique des intensit√©s pour toutes les p√©riodes de retour
        log_intensities = np.log(self.intensity_estimator.astype(float))
        
        montana_parameters = {}
        
        if self.logger:
            self.logger.info("R√©gression lin√©aire pour chaque p√©riode de retour")
        
        # Calcul des param√®tres pour chaque p√©riode de retour
        for period in self.return_periods:
            # R√©gression lin√©aire sur les donn√©es log-log
            # y = ln(I), x = ln(t) => y = intercept + slope * x
            slope, intercept, r_value, p_value, std_err = linregress(
                log_hours, 
                log_intensities[period]
            )
            
            # Conversion vers les param√®tres de Montana :
            # ln(I) = ln(b) - a * ln(t) => slope = -a, intercept = ln(b)
            alpha = -slope  # Coefficient d'abattement (a)
            beta = np.exp(intercept)  # Intensit√© √† 1 heure (b)
            r_squared = r_value**2
            
            montana_parameters[period] = {
                'alpha': alpha, 
                'beta': beta,
                'r_squared': r_squared  # Coefficient de d√©termination pour la qualit√© de l'ajustement
            }
            
        # Cr√©ation du DataFrame des param√®tres
        montana_parameters_df = pd.DataFrame(montana_parameters).T
        
        # Renommage des colonnes selon la convention standard
        montana_parameters_df.columns = ['a', 'b', 'r¬≤']
        montana_parameters_df.index.name = 'P√©riode de retour (ann√©es)'

        self.montana_params = montana_parameters_df

    def _montana_estimation(self):
        """
        Estime les intensit√©s pluviom√©triques en appliquant la formule de Montana.
        
        Cette m√©thode utilise les param√®tres a et b calcul√©s pr√©c√©demment pour reconstituer
        les intensit√©s selon la formule :
        
        I(t,T) = b(T) * t^(-a(T))
        
        O√π :
        - I(t,T) : intensit√© pour la dur√©e t et la p√©riode de retour T
        - b(T) : param√®tre b pour la p√©riode de retour T
        - a(T) : param√®tre a pour la p√©riode de retour T
        - t : dur√©e en heures
        
        Cette estimation permet de valider la qualit√© de l'ajustement par Montana
        et d'interpoler/extrapoler pour d'autres dur√©es si n√©cessaire.
        
        Results:
            self.montana_estimator (pd.DataFrame): Intensit√©s estim√©es par Montana
                                                  Index: dur√©es, Colonnes: p√©riodes de retour
        """
        if self.logger:
            self.logger.info("üìà G√©n√©ration des courbes IDF finales")
        
        montana_estimated_intensity = {}
        
        # Calcul des intensit√©s pour chaque p√©riode de retour
        for period in self.return_periods:
            # R√©cup√©ration des param√®tres de Montana pour cette p√©riode de retour
            alpha = self.montana_params.loc[period, 'a']  # Coefficient d'abattement
            beta = self.montana_params.loc[period, 'b']   # Intensit√© √† 1 heure
            
            # Application de la formule de Montana pour chaque dur√©e : I = b * t^(-a)
            intensities = [
                beta * (float(duration) ** (-alpha)) 
                for duration in self.columns
            ]
            
            montana_estimated_intensity[period] = intensities
            
        # Cr√©ation du DataFrame avec les dur√©es en index et les p√©riodes de retour en colonnes
        self.montana_estimator = pd.DataFrame(
            montana_estimated_intensity, 
            index=self.columns
        )
        self.montana_estimator.index.name = 'Dur√©e (heures)'
        self.montana_estimator.columns.name = 'P√©riode de retour (ann√©es)'
    
    def get_intensity(self, duration: float, return_period: float) -> float:
        """
        Calcule l'intensit√© pluviom√©trique pour une dur√©e et p√©riode de retour donn√©es
        en utilisant la formule de Montana.
        
        Args:
            duration (float): Dur√©e de l'√©pisode pluvieux en heures
            return_period (float): P√©riode de retour en ann√©es
            
        Returns:
            float: Intensit√© pluviom√©trique en mm/h
            
        Raises:
            ValueError: Si la p√©riode de retour n'est pas disponible
        """
        if return_period not in self.return_periods:
            raise ValueError(f"P√©riode de retour {return_period} non disponible. "
                           f"P√©riodes disponibles: {list(self.return_periods)}")
        
        # R√©cup√©ration des param√®tres de Montana
        alpha = self.montana_params.loc[return_period, 'a']
        beta = self.montana_params.loc[return_period, 'b']
        
        # Application de la formule : I = b * t^(-a)
        intensity = beta * (duration ** (-alpha))
        
        return intensity
    
    def get_rainfall_depth(self, duration: float, return_period: float) -> float:
        """
        Calcule la lame pr√©cipit√©e pour une dur√©e et p√©riode de retour donn√©es.
        
        Args:
            duration (float): Dur√©e de l'√©pisode pluvieux en heures
            return_period (float): P√©riode de retour en ann√©es
            
        Returns:
            float: Lame pr√©cipit√©e en mm
        """
        intensity = self.get_intensity(duration, return_period)
        rainfall_depth = intensity * duration
            
        return rainfall_depth
    
    def summary_stats(self) -> pd.DataFrame:
        """
        Retourne un r√©sum√© des statistiques et param√®tres calcul√©s.
        
        Returns:
            pd.DataFrame: Tableau de synth√®se avec les statistiques par dur√©e
        """
        return self.summary.copy()
    
    def get_montana_params(self) -> pd.DataFrame:
        """
        Retourne les param√®tres de Montana calcul√©s.
        
        Returns:
            pd.DataFrame: Param√®tres a, b et r¬≤ pour chaque p√©riode de retour
        """
        return self.montana_params.copy()
    